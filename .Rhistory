set.seed(53535)
xValues = seq(0,2*pi,length=100)
xValues
yValues = rnorm(100) + sin(xValues)
library(splines)
ns1<-ns(xValues,df=1)
ns1<-ns(yValues,df=1)
lm1<-lm(yValues ~ ns1)
summary(lm1)
rmse(lm1)
rmse(yValues,lm1)
RMSE(yValues,lm1)
rmse(lm1,yValues)
install.packages("hydroGOF","http://cran.r-project.org/bin/macosx/leopard/contrib/r-release/hydroGOF_0.3-5.tgz")
library(hydroGOF)
library(zoo)
library(hydroGOF)
rmse(lm1,yValues)
rmse(lm1$fitted,yValues)
ns2<-ns(yValues,df=2)
lm2<-lm(yValues ~ ns2)
rmse(lm2$fitted,yValues)
ns3<-ns(yValues,df=3)
lm3<-lm(yValues ~ ns3)
rmse(lm3$fitted,yValues)
ns4<-ns(yValues,df=4)
lm4<-lm(yValues ~ ns4)
rmse(lm4$fitted,yValues)
ns5<-ns(yValues,df=5)
lm5<-lm(yValues ~ ns5)
rmse(lm5$fitted,yValues)
ns6<-ns(yValues,df=6)
lm6<-lm(yValues ~ n65)
lm6<-lm(yValues ~ ns6)
rmse(lm6$fitted,yValues)
ns7<-ns(yValues,df=7)
lm7<-lm(yValues ~ ns7)
rmse(lm7$fitted,yValues)
ns8<-ns(yValues,df=8)
lm8<-lm(yValues ~ ns8)
rmse(lm8$fitted,yValues)
library(simpleboot)
install.packages("simpleboot","http://cran.r-project.org/bin/macosx/leopard/contrib/r-release/simpleboot_1.1-3.tgz")
library(simpleboot)
library(boot)
library(simpleboot)
data(airquality)
attach(airquality)
quantile(airquality,c(0.75))
quantile(airquality$Wind,c(0.75))
seed(883833)
set.seed(883833)
?one.boot
one.boot(airquality$Wind,se,R=1000)
stderr<-function(x) sqrt(var(x)/length(x))
one.boot(airquality$Wind,stderr,R=1000)
quantile(airquality$Wind,c(0.75))
bw<-one.boot(airquality$Wind,stderr,R=1000)
bw
boot.ci(bw)
data(Cars93,package="MASS")
set.seed(7363)
x <- matrix(rnorm(29*5),nrows=20)
x <- matrix(rnorm(20*5),nrows=20)
x <- matrix(rnorm(20*5),nrow=20)
matplot(x,type="b")
matplot(x,type="a")
matplot(x,type="c")
matplot(x,type="b")
library(maps)
install.packages("maps")
library(maps)
map("world")
set.seet(1234)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
data.frame.dist <- data.frame(x=x,y=y)
dist(data.frame.dist)
h.clustering <- hclust(data.frame.dist)
h.clustering <- hclust(dist(data.frame.dist))
plot(h.clustering)
my.pl.clust <- function(h.clust,lab=h.clust$labels,;ab.col=rep(1,length(h.cluster$labels)),hang=0.1,...){}
my.pl.clust <- function(h.clust,lab=h.clust$labels,;ab.col=rep(1,length(h.cluster$labels)),hang=0.1,...){}
my.pl.clust <- function(h.cluster,lab=h.cluster$labels,;ab.col=rep(1,length(h.cluster$labels)),hang=0.1,...){y <- rep(h.cluster$height,2);x <- as.numeric(h.cluster$merge);y <- y[which(x<0)];x <- x[which(x<0)];x <- abs(x);y <- y[order(x)];x <- x[order(x)];plot(h.clust,labels=FALSE,hang=hang,...)text(x=x, y=y[h.cluster$order]-(max(h.cluster$height)*hang),labels=lab[h.cluster$order],col=lab.col[h.cluster$order],srt=90,adj=c(1,0.5),xpd=NA,...)}
my.pl.clust <- function(h.cluster,lab=h.cluster$labels,;ab.col=rep(1,length(h.cluster$labels)),hang=0.1,...){y <- rep(h.cluster$height,2); x <- as.numeric(h.cluster$merge)y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x);y <- y[order(x)]; x <- x[order(x)];plot(h.clust,labels=FALSE,hang=hang,...)text(x=x, y=y[h.cluster$order]-(max(h.cluster$height)*hang),labels=lab[h.cluster$order],col=lab.col[h.cluster$order],srt=90,adj=c(1,0.5),xpd=NA,...)}
my.pl.clust <- function(h.cluster,lab=h.cluster$labels,;ab.col=rep(1,length(h.cluster$labels)),hang=0.1,...){y <- rep(h.cluster$height,2); x <- as.numeric(h.cluster$merge)y <- y[which(x<0)]; x <- x[which(x<0)]; x <- abs(x)y <- y[order(x)]; x <- x[order(x)]plot(h.clust,labels=FALSE,hang=hang,...)text(x=x, y=y[h.cluster$order]-(max(h.cluster$height)*hang),labels=lab[h.cluster$order],col=lab.col[h.cluster$order],srt=90,adj=c(1,0.5),xpd=NA,...)}
data.frame.test <- data.frame(x,y)
remove(data.frame.dist)
kmeans.object <- kmeans(data.frame.test,centers=3)
names(kmeans.object)
kmeans.object
kmeans$cluser
kmeans$cluster
kmeans.object$cluster
par(mar=rep(0.2,4))
polt(x,y,cols==kmneans.object$cluster,pch-19,cex=2)
plot(x,y,cols==kmneans.object$cluster,pch-19,cex=2)
plot(x,y,cols=kmeans.object$cluster,pch-19,cex=2)
plot(x,y,cols=kmeans.object$cluster,pch=19,cex=2)
plot(x,y,col=kmeans.object$cluster,pch=19,cex=2)
points(kmeans.object$centers,col=1:3,pch=3,cex=3,lwd=3)
```
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(X)
mean(x)
mean(temp)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?par
?splom
library(datasets)
data(airquality)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
?lpoints
?trellis.par.set
library(RColorBrewer)
cols <- brewer.pal(3, "Accent")
pal <- colorRampPalette(cols)
pal(20)
pal(50)
pal(100)
my.palette <- pal(100)
my.palette <- as.data.frame(pal(100))
View(my.palette)
my.palette[,1] <- col2rgb(my.palette[,1])
my.palette <- col2rgb(my.palette)
my.palette$1 <- col2rgb(my.palette$1)
my.pallette$RGB <- col2rgb(my.pallette[,1])
my.palette$RGB <- col2rgb(my.pallette[,1])
my.palette$RGB <- col2rgb(my.palette[,1])
col2rgb("#F6BE8D")
names(my.palette)
names(my.palette) <- c("HEX")
names(my.palette)
head(my.palette$HEX)
my.palette$RGB <-lapply(my.palette$HEX,col2rgb)
head(my.palette)
write.csv(my.palette,file="./Dropbox (LSA)/Customers/WINCOR/colors_palette.csv")
dim(my.palette)
classes(my.palette)
class(my.palette)
class(my.palette[])
class(my.palette$HEX)
class(my.palette$RGB)
View(my.palette)
my.palette$R <- my.palette$RGB[,1]
my.palette$R <- my.palette$RGB[1]
View(my.palette)
my.palette$R <- my.palette$RGB[[1]
View(my.palette)
my.palette$R <- my.palette$RGB[[1]]
my.palette$RGB[,1]
my.palette$RGB[1]
my.palette$RGB[]$red
my.palette$RGB[,red]
my.palette$RGB$red
my.palette$RGB[[1]]
my.palette$RGB[[,1]]
my.palette$RGB[[1,1]]
my.palette$RGB[1,1]
my.palette$RGB[1][1]
my.palette$RGB[[1]][1]
my.palette$RGB[[1]][2]
my.palette$R <- lapply(my.palette$RGB, function(x) x[1])
View(my.palette)
my.palette$G <- lapply(my.palette$RGB, function(x) x[2])
my.palette$B <- lapply(my.palette$RGB, function(x) x[3])
View(my.palette)
my.pallette2 <- my.palette[,c(1,3,4,5)]
View(my.pallette2)
write.csv(my.palette2,file="./Dropbox (LSA)/Customers/WINCOR/colors_palette.csv")
write.csv(my.pallette2,file="./Dropbox (LSA)/Customers/WINCOR/colors_palette.csv")
lapply(my.pallette2,class)
my.pallette2$R <- as.integer(my.pallette2)
View(my.pallette2)
lapply(my.pallette2$R,as.numeric)
my.pallette2$R <- lapply(my.pallette2$R,as.numeric)
my.pallette2$G <- lapply(my.pallette2$G,as.numeric)
my.pallette2$B <- lapply(my.pallette2$B,as.numeric)
lapply(my.pallette2,class)
my.pallette2$G <- lapply(my.pallette2$G[[1]],as.numeric)
lapply(my.pallette2,class)
my.pallette2$R <- as.integer(my.pallette2$R[[1]])
my.pallette2 <- my.palette[,c(1,3,4,5)]
my.pallette2[[1]]
my.pallette2[[2]]
my.pallette2[[2]][1]
my.pallette2[[]][1]
my.pallette2[][1]
my.pallette2[][2]
my.pallette2$R <- as.integer(my.pallette2[][2])
my.pallette2$R <- lapply(my.pallette2[][2],as.integer)
View(my.pallette2)
my.pallette2 <- my.palette[,c(1,3,4,5)]
View(my.pallette2)
my.palette$R <- lapply(my.palette$RGB, function(x) as.integer(x[1]))
View(my.palette)
class(my.palette$R)
my.palette$RGB[][1]
my.palette$RGB[][[1]]
my.palette$RGB[1][1]
my.palette$RGB[1][[1]]
my.palette$RGB[1,1]
my.palette$RGB[1]
my.palette$RGB[1][1]
my.palette$RGB[1][[1]]
my.palette$RGB[1][[[1]]]
my.palette$RGB[1]
class(my.palette[1])
class(my.palette[1]$1)
my.palette$R <- lapply(my.palette$HEX,function(x) as.numeric(col2rgb(x)[1]))
my.palette <- my.palette[,c(1,3)]
View(my.palette)
?col2rgb
my.palette$R <- tapply(my.palette$HEX,function(x) as.numeric(col2rgb(x)[1]))
my.palette$R <- apply(my.palette$HEX,function(x) as.numeric(col2rgb(x)[1]))
my.palette$R <- sapply(my.palette$HEX,function(x) as.numeric(col2rgb(x)[1]))
View(my.palette)
my.palette$G <- sapply(my.palette$HEX,function(x) as.numeric(col2rgb(x)[2]))
my.palette$B <- sapply(my.palette$HEX,function(x) as.numeric(col2rgb(x)[3]))
my.palette$RGB <- sapply(my.palette$HEX,col2rgb)
col2rgb("#7FC97F")
View(my.palette)
write.csv(my.palette,file="./Dropbox (LSA)/Customers/WINCOR/colors_palette.csv")
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/Dropbox/Coursera/Data Products")
setwd("~/Dropbox/Coursera/Data Products/slidify")
author("first_deck")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data (airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
setwd("~/Documents/git/RepData_PeerAssessment1")
install.packages("data.table")
activity.data
activity.data <- read.csv("activity.csv")
activity.data
names(activity.data)
1135 %/% 100
1135 %% 100
POSIXct
browseURL("PA1_template.html")
activity.data$hr <- as.Date(activity.data$interval %/% 100)
activity.data$hr <- activity.data$interval %/% 100
activity.data$date <- as.Date(activity.data$date)
activity.data$hr <- activity.data$interval %/% 100
activity.data$min <- activity.data$interval %% 100
activity.data.wo.na <- activity.data[! is.na(activity.data$steps),]
ttl.steps.by.date <- ddply(activity.data.wo.na,.(date),summarize,steps=sum(steps,rm.na=TRUE))
avg.steps.by.interval <- ddply(activity.data.wo.na,.(interval),summarize,steps=mean(steps))
library(data.table)
library(plyr)
library(lattice)
library(scales)
ttl.steps.by.date <- ddply(activity.data.wo.na,.(date),summarize,steps=sum(steps,rm.na=TRUE))
avg.steps.by.interval <- ddply(activity.data.wo.na,.(interval),summarize,steps=mean(steps))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,xlab = comma(ttl.steps.by.date$steps))
?hist
?axis
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,format("%h %m"))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axis=F)
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=F)
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=F)
axis(1,at=x,labels=format(x,big.mark = ","))
axis(1,at=ttl.steps.by.date$steps,labels=format(x,big.mark = ","))
axis(1,at=ttl.steps.by.date$steps,labels=format(ttl.steps.by.date$steps,big.mark = ","))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=F)
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,labels=format(ttl.steps.by.date$steps,big.mark = ","))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=format(ttl.steps.by.date$steps,big.mark = ","))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axis=format(ttl.steps.by.date$steps,big.mark = ","))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=F)
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=F)
axis(1,labels=format(ttl.steps.by.date$steps,big.mark = ","))
axis(1,at=25,labels=format(ttl.steps.by.date$steps,big.mark = ","))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,labels=comma(25))
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,axes=F)
hist(ttl.steps.by.date$steps,col=4,main="",xlab="Number of Steps Taken per Day",breaks=25,xaxt="n")
axis(1,at=axTicks(1),labels=format(at=axTicks(1),big.mark = ","))
axis(1,at=axTicks(1),labels=format(at=axTicks(1),,format="d",big.mark = ","))
axis(1,at=axTicks(1),labels=formatC(at=axTicks(1),format="d",big.mark = ","))
axis(side=1, at=axTicks(1), labels=formatC(axTicks(1), format="d", big.mark=','))
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=avg.steps.by.interval$interval, labels=paste(avg.steps.by.interval$interval %/% 100,":",avg.steps.by.interval$interval %%100))
axis(side=1, at=axTicks(1), labels=paste(avg.steps.by.interval$interval %/% 100,":",avg.steps.by.interval$interval %%100))
axis(side=1, at=avg.steps.by.interval$interval)
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=avg.steps.by.interval$interval)
plot(avg.steps.by.interval,type="l",ylab="Average number of steps")
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=(avg.steps.by.interval$interval %% 100))
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=(avg.steps.by.interval$interval %/% 100))
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=(avg.steps.by.interval$interval %/% 100 * 100))
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=(avg.steps.by.interval$interval %/% 100 * 100),labels=paste(avg.steps.by.interval$interval %/% 100,":",avg.steps.by.interval$interval %%100))
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=(avg.steps.by.interval$interval %/% 100 * 100),labels=paste(avg.steps.by.interval$interval %/% 100,":",avg.steps.by.interval$interval %%100,sep=""))
plot(avg.steps.by.interval,type="l",ylab="Average number of steps",xaxt="n")
axis(side=1, at=(avg.steps.by.interval$interval %/% 100 * 100),labels=paste(avg.steps.by.interval$interval %/% 100,":00",sep=""))
activity.data.fix.na$daycat <- weekdays(activity.data.fix.na$date)
activity.data.fix.na[! (activity.data.fix.na$daycat %in% c("Saturday","Sunday")),]$daycat <- "weekday"
activity.data.fix.na[activity.data.fix.na$daycat %in% c("Saturday","Sunday"),]$daycat <- "weekend"
activity.data.fix.na$daycat <- as.factor(activity.data.fix.na$daycat)
```
Plot the steps by day category using Lattice plotting system
```{r, echo=TRUE, fig.width=10, fig.height=6}
avg.nb.steps.per.interval.per.daycat <- ddply(activity.data.fix.na,.(interval,daycat),summarize,avgsteps=mean(steps))
xyplot(avgsteps ~ interval | daycat,data=avg.nb.steps.per.interval.per.daycat,type="l",layout=c(1,2),ylab="Number of steps",xaxt="n",xlab="Time of the day")
?xyplot
